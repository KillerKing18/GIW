# -*- coding: utf-8 -*-

##
## Carlos Bilbao, Mario Bocos, Álvaro López y David Élbez declaramos que esta solución es fruto exclusivamente
## de nuestro trabajo personal. No hemos sido ayudados por ninguna otra persona ni hemos
## obtenido la solución de fuentes externas, y tampoco hemos compartido nuestra solución
## con nadie. Declaramos además que no hemos realizado de manera deshonesta ninguna otra
## actividad que pueda mejorar nuestros resultados ni perjudicar los resultados de los demás.
##

import pymongo
from pymongo import MongoClient
from bottle import post, get, route, run, template, request

##############
# APARTADO 1 #
##############

# TODO
# Explicación detallada del mecanismo escogido para el almacenamiento de
# contraseñas, explicando razonadamente por qué es seguro
#

@post('/signup')
def signup():
   query = request.POST
   # tenemos: name, nickname, country, email, password, password2

   if(query['password'] != query['password2']):
	return '''<p>Las contraseñas no coinciden</p>'''

   if(query['name'] != ""):
   	result = collection.find({'name':query['name']})
	if(result.count() > 0):
		return '''<p>El alias de usuario ya existe</p>'''
   else:
		return '''<p>No puedes usar un nombre vacio</p>''''

   return '''<p>Bienvenido usuario $query['name']<p>'''



@post('/change_password')
def change_password():
    pass

@post('/login')
def login():
    pass

##############
# APARTADO 2 #
##############

#
# Explicación detallada de cómo se genera la semilla aleatoria, cómo se construye
# la URL de registro en Google Authenticator y cómo se genera el código QR
#

@post('/signup_totp')
def signup_totp():
    pass


@post('/login_totp')
def login_totp():
    pass

if __name__ == "__main__":
    # NO MODIFICAR LOS PARÁMETROS DE run()
    run(host='localhost',port=8080,debug=True)
