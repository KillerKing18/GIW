def displayAndList(miembros, restriccion):
    lista = []
    i = 1 #index
    for item in miembros:
        if restriccion == 0: # Distrito u horas
            if len(item) == 0:
                print(str(i) + "\t--Indefinido--")
            else:
                print(str(i) + "\t" + item)
        elif restriccion == 1: # Tipo de actividad
            if len(item) == 0:
                print(str(i) + "\t--Indefinido--")
            else:
                print(str(i) + "\t" + item[23:])
        elif restriccion == 2: # Tipo de audiencia
            if len(item) != 0:
                print(str(i) + "\t" + item[9:])
        if restriccion != 2 or len(item) != 0: # No mostramos el tipo de audiencia vacia ni lo aniadimos a la lista
            lista.append(item) # Aniadimos todos los elementos de miembros en la lista
            i = i + 1
        
    return lista

def displayActividad(campos):
    i = 1
    print("\t- Informacion del evento:")
    for item in campos:
        if item == "":
            item = "--Indefinido--"
        if i == 1:
            print("\t\t" + str(i) + ".\tTitulo: " + item)
        elif i == 2:
            print("\t\t" + str(i) + ".\tFecha de inicio - Fecha de finalizacion: " + item)
        elif i == 3:
            print("\t\t" + str(i) + ".\tDias de la semana: " + item) 
        elif i == 4:
            print("\t\t" + str(i) + ".\tDias excluidos: " + item)
        elif i == 5:
            print("\t\t" + str(i) + ".\tHora: " + item)
        elif i == 6:
            print("\t\t" + str(i) + ".\tDescripcion: " + item)
        elif i == 7:
            print("\t\t" + str(i) + ".\tNombre de instalacion: " + item)
        elif i == 8:
            print("\t\t" + str(i) + ".\tLatitud: " + item)
        elif i == 9:
            print("\t\t" + str(i) + ".\tLongitud: " + item)
        elif i == 10: # Tipo de actividad
            print("\t\t" + str(i) + ".\tTipo de actividad: " + item[23:])
        elif i == 11: # Tipo/s de audiencia
            audienciasSeparadas = item.split(",")
            string = ""
            for cadena in audienciasSeparadas:
                string = string + cadena[9:] + "/" # Para un display mas friendly
            print("\t\t" + str(i) + ".\tAudiencia: " + (string[:len(string) - 1] if item != "--Indefinido--" else item))
        i = i + 1

def checkCorrectness(lista, caso):
    inputCorrecto = False
    while not inputCorrecto:
        elemento = input('\nIntroduce el numero del '+ caso + ": ")
        try:
            elemento = lista[int(elemento) - 1]
            inputCorrecto = True
        except:
            print("\nError. Introduce un numero correcto.") # Necesitamos numeros
    return elemento

def rellenarLista(linea):
    lista = []
    lista.append(linea[1])                                             # Titulo
    lista.append(linea[7] + " - " + linea[8])                          # Fecha inicio y fin
    lista.append(linea[5])                                             # DIAS-SEMANA
    lista.append(linea[6])                                             # DIAS-EXCLUIDOS
    lista.append(linea[9])                                             # Hora
    lista.append(linea[10])                                            # Description
    lista.append(linea[15])                                            # NOMBRE-INSTALACION
    lista.append(linea[18])                                            # Latitud
    lista.append(linea[19])                                            # Longitud
    lista.append(linea[21])                                            # Tipo actividad
    lista.append(linea[22])                                            # Tipo audiencia
   
    return lista

def leerAlmacenar(entrada):
    distritos = {}
    i = 0
    for linea in entrada:
        if i != 0: # Omitir primera linea
            audienciasString = linea[22].split(",")
            if distritos.get(linea[20]) == None:
                # No existe el distrito de esta actividad.  
                audiencias = {}
                for aud in audienciasString:
                    listaCampos = rellenarLista(linea)
                    listaActividades = []
                    listaActividades.append(listaCampos)
                    horarios = {}
                    horarios[linea[9]] = listaActividades
                    audiencias[aud] = horarios
                #audiencias[aud]["hola"] = "adios" # Para ver como falla
                tipoActividad = {}
                tipoActividad[linea[21]] = audiencias
                distritos[linea[20]] = tipoActividad
            else:
                # Existe el distrito de esta actividad.
                if distritos[linea[20]].get(linea[21]) == None:
                    # No existe el tipo de actividad de esta actividad en este distrito.
                    audiencias = {}
                    for aud in audienciasString:
                        listaCampos = rellenarLista(linea)
                        listaActividades = []
                        listaActividades.append(listaCampos)
                        horarios = {}
                        horarios[linea[9]] = listaActividades
                        audiencias[aud] = horarios
                    distritos[linea[20]][linea[21]] = audiencias
                else:
                    # Existe el tipo de actividad de esta actividad en este distrito.
                    for aud in audienciasString:
                        if distritos[linea[20]][linea[21]].get(aud) == None:
                            # No existe el tipo de audiencia de esta actividad en este distrito y este tipo de actividad.
                            listaCampos = rellenarLista(linea)
                            listaActividades = []
                            listaActividades.append(listaCampos)
                            horarios = {}
                            horarios[linea[9]] = listaActividades
                            distritos[linea[20]][linea[21]][aud] = horarios
                        else:
                            # Existe el tipo de audiencia de esta actividad en este distrito y este tipo de actividad.
                            if distritos[linea[20]][linea[21]][aud].get(linea[9]) == None:
                                # No existe otra actividad del mismo tipo de audiencia, tipo de actividad y distrito con este horario.
                                listaCampos = rellenarLista(linea)
                                listaActividades = []
                                listaActividades.append(listaCampos)
                                distritos[linea[20]][linea[21]][aud][linea[9]] = listaActividades # ESTA LINEA LO METE PARA EL PRIMER AUD Y PARA TODOS LOS SIGUIENTES
                            else:
                                # Existe otra actividad del mismo tipo de audiencia, tipo de actividad y distrito con este horario.
                                listaCampos = rellenarLista(linea)
                                distritos[linea[20]][linea[21]][aud][linea[9]].append(listaCampos)
        i = i + 1
    return distritos

def busqueda(mapa):
    print("Distritos almacenados:\n")

    lista = displayAndList(mapa.keys(), 0) # Ensenia las posibilidades y las guarda en una lista

    distrito = checkCorrectness(lista, "distrito"); # Pide el num hasta que sea un formato correcto

    print("\nTipos de actividades almacenadas para el distrito " + distrito + ":\n")

    lista = displayAndList(mapa[distrito].keys(), 1) # Ensenia las posibilidades y guarda en lista

    actividad = checkCorrectness(lista, "tipo de actividad")

    print("\nTipos de audiencia para el tipo de actividad " + actividad[23:] + " para el distrito " + distrito + ".\n")

    lista = displayAndList(mapa[distrito][actividad].keys(), 2) # Ensenia posibilidades y guarda en lista 

    audiencia = checkCorrectness(lista, "tipo de audiencia")

    print("\nEstos son los horarios para el tipo de audiencia " + audiencia[9:] 
          + " para el tipo de actividad " + actividad[23:] + " para el distrito " + distrito + ":\n")

    mapaFinal = {}
    if mapa[distrito][actividad].get("") == None:
        #for item in mapa[distrito][actividad][audiencia]:
        #    hora = item.split(":")
        #    if mapaFinal.get(int(hora[0])) == None:
        #        mapaFinal[hora[0]] = mapa[distrito][actividad][audiencia][item]
        #    else:
        #        mapaFinal[hora[0]].append(mapa[distrito][actividad][audiencia][item])
        mapaFinal = mapa[distrito][actividad][audiencia]
    else:
        mapaFinal = {}
        for elemento in mapa[distrito][actividad][""]:
            mapaFinal[elemento] = mapa[distrito][actividad][""][elemento]
        for elemento in mapa[distrito][actividad][audiencia]:
            if mapaFinal.get(elemento) == None:
                mapaFinal[elemento] = mapa[distrito][actividad][audiencia][elemento]
            else:
                for evento in mapa[distrito][actividad][audiencia][elemento]:
                    mapaFinal[elemento].append(evento)
    
    lista = displayAndList(mapaFinal.keys(), 0)

    hora = checkCorrectness(lista, "horario")
    
    ejercicioTres(mapaFinal[hora])
             
def numeroCorrecto(caso, restriccion):
    inputCorrecto = False
    while not inputCorrecto:
        elemento = input('\nIntroduce '+ caso + ": ")
        numero = float(elemento)
        try:
            if numero < 0 and restriccion == 1: # Restriccion = 1 --> Debe ser un numero positivo
                print("\nError. Introduce un numero positivo.")
            else:
                inputCorrecto = True
        except:
            print("\nError. Introduce un numero correcto.") # Necesitamos numeros
    return numero

import math
def haversine(lat1, lon1, lat2, lon2):
    rad=math.pi/180
    dlat=lat2-lat1
    dlon=lon2-lon1
    R=6372.795477598
    a=(math.sin(rad*dlat/2))**2 + math.cos(rad*lat1)*math.cos(rad*lat2)*(math.sin(rad*dlon/2))**2
    distancia=2*R*math.asin(math.sqrt(a))
    return distancia

import json
def ejercicioDos(centroCultural):
    leer = json.loads(open('CentrosCulturales.json',encoding="utf8").read()) # Objeto empleado (da json)
    encontrado = False
    for item in leer["@graph"]:
        if item["title"] == centroCultural:
            encontrado = True
            print("\t- Datos del centro cultural:")
            print("\t\t1.\tCalle: " + item["address"]["street-address"])
            print("\t\t2.\tDistrito postal: " + item["address"]["postal-code"])
            print("\t\t3.\tDescripcion del lugar: " + item["organization"]["organization-desc"])
            print("\t\t4.\tAccesibilidad: " + item["organization"]["accesibility"])
            print("\t\t5.\tServicios: " + item["organization"]["services"])
    if encontrado == False:
        print("\t- No se ha encontrado informacion sobre el centro cultural.")        
    
def ejercicioTres(listaActividades):
    latitud = numeroCorrecto("tu latitud", 0)
    longitud = numeroCorrecto("tu longitud", 0)
    distanciaUsuario = numeroCorrecto("la distancia en Km", 1)
    print("\n------------------------------------------------\nAPLICANDO FILTROS...\n------------------------------------------------\n")
    i = 1
    for item in listaActividades:
        dist = haversine(latitud, longitud,  float(item[7]), float(item[8]))  # Calcula las distancias (funcion facilitada)
        if (dist < distanciaUsuario) : # Solo en caso de que se cumpla la condicion de la distancia
            print("- Actividad " + str(i) + ":\n")
            print("\t- Distancia = " + str(dist) + " Km\n") # Mostrar la distancia entre el usuario y la actividad
            displayActividad(item)
            print("")
            ejercicioDos(item[6])
            print("\n------------------------------------------------\n")
            i = i + 1
    if i == 1:
        print("No existen actividades con los criterios introducidos.")

import csv
csvarchivo = open('AgendaPrueba.csv',encoding="utf8",errors='ignore')
entrada = csv.reader(csvarchivo, delimiter=";")
mapaDistritos = leerAlmacenar(entrada) # Almacena todo en una estructura de diccionarios 
busqueda(mapaDistritos)

# TODO
# Organizar por intervalos (ordenados si puede ser)